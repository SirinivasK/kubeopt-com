name: 'Terraform Infrastructure'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  TF_WORKING_DIR: './terraform'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
        
    - name: Terraform Format Check
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform fmt -check -recursive
      
    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init -backend=false
      
    - name: Terraform Validate
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform validate
      
    - name: Run tflint
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: latest
        
    - name: TFLint
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        tflint --init
        tflint
        
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ${{ env.TF_WORKING_DIR }}
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif
        
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=kubeopt-com.tfstate"
          
    - name: Terraform Plan
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform plan \
          -var="resource_group_name=rg-kubeopt-com-prod" \
          -var="cluster_name=aks-kubeopt-com-prod" \
          -var="acr_name=acrkubeoptioprod" \
          -var="domain_name=kubeopt.com" \
          -var="contact_email=admin@kubeopt.com" \
          -var="github_actions_service_principal_id=${{ secrets.GH_ACTIONS_SP_ID }}" \
          -out=tfplan
          
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan
        path: ${{ env.TF_WORKING_DIR }}/tfplan

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=kubeopt-com.tfstate"
          
    - name: Terraform Apply
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform apply -auto-approve \
          -var="resource_group_name=rg-kubeopt-com-prod" \
          -var="cluster_name=aks-kubeopt-com-prod" \
          -var="acr_name=acrkubeoptioprod" \
          -var="domain_name=kubeopt.com" \
          -var="contact_email=admin@kubeopt.com" \
          -var="github_actions_service_principal_id=${{ secrets.GH_ACTIONS_SP_ID }}"
          
    - name: Save Terraform Outputs
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform output -json > terraform-outputs.json
        
    - name: Upload Terraform Outputs
      uses: actions/upload-artifact@v3
      with:
        name: terraform-outputs
        path: ${{ env.TF_WORKING_DIR }}/terraform-outputs.json
        
    - name: Display Infrastructure URLs
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        echo "üéâ Infrastructure deployment completed!"
        echo ""
        echo "üìä Monitoring URLs:"
        terraform output monitoring_urls
        echo ""
        echo "üåê Deployment URLs:"
        terraform output deployment_urls
        echo ""
        echo "üìù Next Steps:"
        terraform output next_steps

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: destruction
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=kubeopt-com.tfstate"
          
    - name: Terraform Destroy
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform destroy -auto-approve \
          -var="resource_group_name=rg-kubeopt-com-prod" \
          -var="cluster_name=aks-kubeopt-com-prod" \
          -var="acr_name=acrkubeoptioprod" \
          -var="domain_name=kubeopt.com" \
          -var="contact_email=admin@kubeopt.com" \
          -var="github_actions_service_principal_id=${{ secrets.GH_ACTIONS_SP_ID }}"
          
    - name: Confirm Destruction
      run: echo "üóëÔ∏è Infrastructure has been destroyed!"