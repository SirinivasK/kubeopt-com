name: 'kubeopt.com CI/CD Pipeline'

on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY_NAME: acrkubeoptio
  IMAGE_NAME: kubeopt-com
  RESOURCE_GROUP: rg-kubeopt-com
  CLUSTER_NAME: aks-kubeopt-com
  NAMESPACE: kubeopt-com

jobs:
  # Job 1: Code Quality and Security Checks
  quality:
    name: 'Code Quality & Security'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 bandit safety
        
    - name: Run linting with flake8
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run security scan with bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -ll
        
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 2: Build and Test
  build:
    name: 'Build & Test'
    runs-on: ubuntu-latest
    needs: quality
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Deploy to Staging
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}
        
    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.NAMESPACE }}-staging --dry-run=client -o yaml | kubectl apply -f -
        
    - name: Create secrets
      run: |
        kubectl create secret generic kubeopt-secrets \
          --from-literal=secret-key="${{ secrets.FLASK_SECRET_KEY }}" \
          --from-literal=mail-username="${{ secrets.MAIL_USERNAME }}" \
          --from-literal=mail-password="${{ secrets.MAIL_PASSWORD }}" \
          --namespace=${{ env.NAMESPACE }}-staging \
          --dry-run=client -o yaml | kubectl apply -f -
          
    - name: Deploy to staging
      run: |
        # Update image tag in deployment
        sed -i 's|acrkubeoptio.azurecr.io/kubeopt-com:latest|${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}|g' k8s/deployment.yaml
        
        # Deploy all manifests to staging namespace
        sed 's/namespace: kubeopt-com/namespace: kubeopt-com-staging/g' k8s/*.yaml | kubectl apply -f -
        
    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/kubeopt-website -n ${{ env.NAMESPACE }}-staging --timeout=300s
        
    - name: Run health checks
      run: |
        kubectl wait --for=condition=ready pod -l app=kubeopt-website -n ${{ env.NAMESPACE }}-staging --timeout=120s
        
        # Get service endpoint
        EXTERNAL_IP=$(kubectl get service kubeopt-website -n ${{ env.NAMESPACE }}-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "Staging URL: http://$EXTERNAL_IP"
        
        # Basic health check
        kubectl exec -n ${{ env.NAMESPACE }}-staging deployment/kubeopt-website -- curl -f http://localhost:5000/health || exit 1

  # Job 4: Deploy to Production
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}
        
    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
    - name: Create secrets
      run: |
        kubectl create secret generic kubeopt-secrets \
          --from-literal=secret-key="${{ secrets.FLASK_SECRET_KEY }}" \
          --from-literal=mail-username="${{ secrets.MAIL_USERNAME }}" \
          --from-literal=mail-password="${{ secrets.MAIL_PASSWORD }}" \
          --namespace=${{ env.NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -
          
    - name: Deploy to production
      run: |
        # Update image tag in deployment
        sed -i 's|acrkubeoptio.azurecr.io/kubeopt-com:latest|${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}|g' k8s/deployment.yaml
        
        # Deploy all manifests
        kubectl apply -f k8s/
        
    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/kubeopt-website -n ${{ env.NAMESPACE }} --timeout=300s
        
    - name: Run health checks
      run: |
        kubectl wait --for=condition=ready pod -l app=kubeopt-website -n ${{ env.NAMESPACE }} --timeout=120s
        
        # Get ingress endpoint
        EXTERNAL_IP=$(kubectl get ingress kubeopt-website-ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "Production URL: https://kubeopt.com"
        echo "External IP: $EXTERNAL_IP"
        
        # Basic health check
        kubectl exec -n ${{ env.NAMESPACE }} deployment/kubeopt-website -- curl -f http://localhost:5000/health || exit 1
        
    - name: Post-deployment tests
      run: |
        # Add any post-deployment tests here
        echo "Running post-deployment tests..."
        
        # Test main pages
        kubectl exec -n ${{ env.NAMESPACE }} deployment/kubeopt-website -- curl -f http://localhost:5000/ || exit 1
        kubectl exec -n ${{ env.NAMESPACE }} deployment/kubeopt-website -- curl -f http://localhost:5000/features || exit 1
        kubectl exec -n ${{ env.NAMESPACE }} deployment/kubeopt-website -- curl -f http://localhost:5000/pricing || exit 1
        
        echo "All post-deployment tests passed!"

  # Job 5: Cleanup and Notification
  notify:
    name: 'Notify Deployment Status'
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Deployment Success Notification
      if: needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success'
      run: |
        echo "✅ kubeopt.com deployment successful!"
        echo "🌐 Website: https://kubeopt.com"
        echo "📊 Monitor: Azure Portal"
        
    - name: Deployment Failure Notification
      if: needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure'
      run: |
        echo "❌ kubeopt.com deployment failed!"
        echo "🔍 Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        exit 1