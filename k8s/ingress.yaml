apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kubeopt-website-ingress
  namespace: kubeopt-com
  labels:
    app: kubeopt-website
    app.kubernetes.io/name: kubeopt-website
    app.kubernetes.io/component: ingress
  annotations:
    # NGINX Ingress Controller annotations
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Performance optimizations
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Certificate management with cert-manager
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: http01
    
    # Azure specific annotations
    service.beta.kubernetes.io/azure-load-balancer-resource-group: "MC_rg-kubeopt-com_aks-kubeopt-com_eastus"
spec:
  tls:
  - hosts:
    - kubeopt.com
    - www.kubeopt.com
    secretName: kubeopt-com-tls
  rules:
  - host: kubeopt.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kubeopt-website
            port:
              number: 80
  - host: www.kubeopt.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kubeopt-website
            port:
              number: 80
---
# ClusterIssuer for Let's Encrypt certificates
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  labels:
    app.kubernetes.io/name: cert-manager-issuer
    app.kubernetes.io/component: certificate
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@kubeopt.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
---
# ClusterIssuer for Let's Encrypt staging (for testing)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  labels:
    app.kubernetes.io/name: cert-manager-issuer
    app.kubernetes.io/component: certificate
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: admin@kubeopt.com
    privateKeySecretRef:
      name: letsencrypt-staging
    solvers:
    - http01:
        ingress:
          class: nginx